from rest_framework import serializers
from django.utils import timezone
from .validators import (
    CustomUsernameValidator,
    CustomPasswordValidator,
    CustomLocationValidator,
    CustomNameValidator,
    CustomDescriptionValidator,
)
from .models import (
    Users,
    Activities,
    Allergens,
    UserActivities,
    UserAllergens,
    PlannedActivities,
)


class UsersSerializer(serializers.ModelSerializer):
    """
    Serializer for the Users model:
    - id : Primary key, automatically generated by Django.
    - username : Username of the user.
    - email : email address with validation type by django.
    - location : location of the user.
    - password : password is hashed and not exposed in serializer

    """

    username = serializers.CharField(
        max_length=50,
        required=True,
        validators=[CustomUsernameValidator()],
    )
    email = serializers.EmailField(
        required=True,
    )
    password = serializers.CharField(
        write_only=True,
        max_length=128,
        required=True,
        validators=[CustomPasswordValidator()],
    )
    location = serializers.JSONField(
        required=True,
        validators=[CustomLocationValidator()],
    )

    class Meta:
        model = Users
        fields = ["id", "username", "email", "location", "password"]
        extra_kwargs = {"password": {"write_only": True}}


class ActivitiesSerializer(serializers.ModelSerializer):
    """
    Serializer for the Activities model:
    - id : Primary key, automatically generated by Django.
    - name : Name of the activity.
    - description : Description of the activity.
    """

    name = serializers.CharField(
        max_length=50,
        required=True,
        validators=[CustomNameValidator()],
    )
    description = serializers.CharField(
        max_length=200,
        required=True,
        validators=[CustomDescriptionValidator()],
    )

    class Meta:
        model = Activities
        fields = ["id", "name", "description"]


class AllergensSerializer(serializers.ModelSerializer):
    """
    Serializer for the Allergens model:
    - id : Primary key, automatically generated by Django.
    - name : Name of the allergen.
    - description : Description of the allergen.
    """

    name = serializers.CharField(
        max_length=50,
        required=True,
        validators=[CustomNameValidator()],
    )
    description = serializers.CharField(
        max_length=200,
        required=True,
        validators=[CustomDescriptionValidator()],
    )

    class Meta:
        model = Allergens
        fields = ["id", "name", "description"]


class UserActivitiesSerializer(serializers.ModelSerializer):
    """
    Serializer for the UserActivities model:
    - id : Primary key, automatically generated by Django.
    - user : User's id.
    - activity : Activity's id.
    """

    user = serializers.PrimaryKeyRelatedField(
        queryset=Users.objects.all(), required=True
    )
    activity = serializers.PrimaryKeyRelatedField(
        queryset=Activities.objects.all(), required=True
    )

    class Meta:
        model = UserActivities
        fields = ["id", "user", "activity"]


class UserAllergensSerializer(serializers.ModelSerializer):
    """
    Serializer for the UserAllergens model:
    - id : Primary key, automatically generated by Django.
    - user : User's id.
    - allergen : Allergen's id.
    """

    user = serializers.PrimaryKeyRelatedField(
        queryset=Users.objects.all(), required=True
    )
    allergen = serializers.PrimaryKeyRelatedField(
        queryset=Allergens.objects.all(), required=True
    )

    class Meta:
        model = UserAllergens
        fields = ["id", "user", "allergen"]


class PlannedActivitiesSerializer(serializers.ModelSerializer):
    """
    Serializer for the PlannedActivities model:
    - id : Primary key, automatically generated by Django.
    - user : User's id.
    - activity: Activity's id.
    - location : Location of the activity.
    - start_datetime : Start datetime of the activity.
    - end_datetime : End datetime of the activity.
    """

    user = serializers.PrimaryKeyRelatedField(
        required=True,
        queryset=Users.objects.all(),
    )
    activity = serializers.PrimaryKeyRelatedField(
        required=True,
        queryset=Activities.objects.all(),
    )
    location = serializers.JSONField(
        required=True,
        validators=[CustomLocationValidator()],
    )
    start_datetime = serializers.DateTimeField(
        required=True,
        input_formats=["%Y-%m-%d %H:%M"],
    )
    end_datetime = serializers.DateTimeField(
        required=True,
        input_formats=["%Y-%m-%d %H:%M"],
    )

    def validate(self, data):
        """
        Ovveride validate method for datetime validation.
        """
        now = timezone.now()
        if data["start_datetime"] < now:
            raise serializers.ValidationError(
                "Start datetime must be >= to now !")
        if data["end_datetime"] < data["start_datetime"]:
            raise serializers.ValidationError(
                "End datetime must be > to start datetime."
            )
        return data

    class Meta:
        model = PlannedActivities
        fields = [
            "id",
            "user",
            "activity",
            "location",
            "start_datetime",
            "end_datetime",
        ]
