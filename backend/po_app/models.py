from django.contrib.auth.models import AbstractUser
from django.db import models
from django.utils import timezone


class Users(AbstractUser):
    """
    Using the AbstractUser model from Django, which has provided fields:
        - id : Primary key, automatically generated by Django.
        - username : Username of the user.
        - email : email address with validation type by django.
        - password : password automatically hashed.
        - first_name et last_name.
        - is_staff : Set the staff status, so can access the admin site.
        - is_superuser : Set the superuser status, so can access the admin site and manage everything.
        - is_active : Specify if user is active or not.
        - last_login : Last login date.
        - date_joined : Creation date.

    Ovveride the default Django User model:
    - Change username len.
    - Add unique option to email field.
    - Add address field to the user model.
    """

    username = models.CharField(
        unique=True, max_length=50, blank=False, null=False)
    email = models.EmailField(unique=True, blank=False, null=False)
    address = models.CharField(max_length=200, blank=False, null=False)

    def __str__(self):
        """
        Returns a string representation of the user object.
        """
        return f"{self.username} - {self.email}"


class Activities(models.Model):
    """
    Model representing an activity.
    """

    name = models.CharField(unique=True, max_length=50,
                            blank=False, null=False)
    description = models.CharField(
        unique=True, max_length=200, blank=False, null=False)

    def __str__(self):
        """
        Returns a string representation of the activity object.
        """
        return f"{self.name} - {self.description}"

    class Meta:
        verbose_name_plural = "Activities"


class Allergens(models.Model):
    """
    Model representing an allergen.
    """

    name = models.CharField(unique=True, max_length=50,
                            blank=False, null=False)
    description = models.CharField(
        unique=True, max_length=200, blank=False, null=False)

    def __str__(self):
        """
        Returns a string representation of the allergen object.
        """
        return f"{self.name} - {self.description}"

    class Meta:
        verbose_name_plural = "Allergens"


class UserActivities(models.Model):
    """
    Model representing a user's activity.
    """

    user = models.ForeignKey(Users, on_delete=models.CASCADE)
    activity = models.ForeignKey(Activities, on_delete=models.CASCADE)

    class Meta:
        unique_together = ("user", "activity")
        verbose_name_plural = "UserActivities"

    def __str__(self) -> str:
        """
        Returns a string representation of the user activity object.
        """
        return f"{self.user.username} - {self.activity.name}"


class UserAllergens(models.Model):
    """
    Model representing a user's allergen.
    """

    user = models.ForeignKey(Users, on_delete=models.CASCADE)
    allergen = models.ForeignKey(Allergens, on_delete=models.CASCADE)

    class Meta:
        unique_together = ("user", "allergen")
        verbose_name_plural = "UserAllergens"

    def __str__(self) -> str:
        """
        Returns a string representation of the user allergen object.
        """
        return f"{self.user.username} - {self.allergen.name}"


class PlannedActivities(models.Model):
    """
    Model representing a planned activity by a user.
    """

    user = models.ForeignKey(Users, on_delete=models.CASCADE)
    activity = models.ForeignKey(Activities, on_delete=models.CASCADE)
    location = models.CharField(max_length=200, blank=False, null=False)
    start_datetime = models.DateTimeField(
        blank=False, null=False, default=timezone.now)
    end_datetime = models.DateTimeField(
        blank=False, null=False, default=timezone.now)

    class Meta:
        unique_together = ("user", "activity",
                           "start_datetime", "end_datetime")
        verbose_name_plural = "PlannedActivities"

    def __str__(self) -> str:
        """
        Returns a string representation of the planned activity object.
        """
        return f"{self.user.username} - {self.activity.name} - {self.start_datetime} - {self.end_datetime}"
