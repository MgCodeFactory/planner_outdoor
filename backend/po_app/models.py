from django.contrib.auth.models import AbstractUser
from django.contrib.auth.hashers import make_password
from django.core.exceptions import ValidationError
from django.db import models
from django.utils import timezone
from .validators import (
    CustomUsernameValidator,
    CustomPasswordValidator,
    CustomLocationValidator,
    CustomNameValidator,
    CustomDescriptionValidator,
)


class Users(AbstractUser):
    """
    Using the AbstractUser model from Django, which has provided fields:
        - id : Primary key, automatically generated by Django.
        - username : Username of the user.
        - email : email address with validation type by django.
        - password : password automatically hashed.
        - first_name et last_name.
        - is_staff : Set the staff status, so can access the admin site.
        - is_superuser : Set the superuser status, so can access the admin site and manage everything.
        - is_active : Specify if user is active or not.
        - last_login : Last login date.
        - date_joined : Creation date.

    Ovveride the default Django User model:
    - Change username len.
    - Add unique option to email field.
    - Add location field to the user model.
    - Ovveride the django save method.
    """

    username = models.CharField(
        unique=True,
        max_length=50,
        blank=False,
        null=False,
        validators=[CustomUsernameValidator()],
    )
    email = models.EmailField(
        unique=True,
        blank=False,
        null=False,
    )
    password = models.CharField(
        max_length=128,
        blank=False,
        null=False,
        validators=[CustomPasswordValidator()],
    )
    location = models.JSONField(
        blank=False,
        null=False,
        validators=[CustomLocationValidator()],
    )

    def save(self, *args, **kwargs):
        """
        Override save method to hash password before save user.
        """
        if self.pk is None or not self.password.startswith('pbkdf2_sha256$'):
            self.password = make_password(self.password)
        super().save(*args, **kwargs)

    def __str__(self):
        """
        Returns a string representation of the user object.
        """
        return f"{self.username} - {self.email}"


class Activities(models.Model):
    """
    Model representing an activity.
    """

    name = models.CharField(
        unique=True,
        max_length=50,
        blank=False,
        null=False,
        validators=[CustomNameValidator()],
    )
    description = models.CharField(
        unique=True,
        max_length=200,
        blank=False,
        null=False,
        validators=[CustomDescriptionValidator()],
    )

    class Meta:
        verbose_name_plural = "Activities"

    def __str__(self):
        """
        Returns a string representation of the activity object.
        """
        return f"{self.name} - {self.description}"


class Allergens(models.Model):
    """
    Model representing an allergen.
    """

    name = models.CharField(
        unique=True,
        max_length=50,
        blank=False,
        null=False,
        validators=[CustomNameValidator()],
    )
    description = models.CharField(
        unique=True,
        max_length=200,
        blank=False,
        null=False,
        validators=[CustomDescriptionValidator()],
    )

    class Meta:
        verbose_name_plural = "Allergens"

    def __str__(self):
        """
        Returns a string representation of the allergen object.
        """
        return f"{self.name} - {self.description}"


class UserActivities(models.Model):
    """
    Model representing a user activity.
    """

    user = models.ForeignKey(
        Users,
        on_delete=models.CASCADE,
    )
    activity = models.ForeignKey(
        Activities,
        on_delete=models.CASCADE,
    )

    class Meta:
        unique_together = ("user", "activity")
        verbose_name_plural = "UserActivities"

    def __str__(self) -> str:
        """
        Returns a string representation of the user activity object.
        """
        return f"{self.user.username} - {self.activity.name}"


class UserAllergens(models.Model):
    """
    Model representing a user"s allergen.
    """

    user = models.ForeignKey(
        Users,
        on_delete=models.CASCADE,
    )
    allergen = models.ForeignKey(
        Allergens,
        on_delete=models.CASCADE,
    )

    class Meta:
        unique_together = ("user", "allergen")
        verbose_name_plural = "UserAllergens"

    def __str__(self) -> str:
        """
        Returns a string representation of the user allergen object.
        """
        return f"{self.user.username} - {self.allergen.name}"


class PlannedActivities(models.Model):
    """
    Model representing a planned activity by a user.
    """

    user = models.ForeignKey(
        Users,
        on_delete=models.CASCADE,
    )
    activity = models.ForeignKey(
        Activities,
        on_delete=models.CASCADE,
    )
    location = models.JSONField(
        blank=False,
        null=False,
        validators=[CustomLocationValidator()],
    )
    start_datetime = models.DateTimeField(
        blank=False,
        null=False,
        default=timezone.now,
    )
    end_datetime = models.DateTimeField(
        blank=False,
        null=False,
        default=timezone.now,
    )

    def clean(self):
        """
        Ovveride the clean method for datetime validation.
        """
        now = timezone.now()
        if self.start_datetime < now:
            raise ValidationError("Start datetime must be >= to now !")
        if self.end_datetime < self.start_datetime:
            raise ValidationError("End datetime must be > to start datetime.")

    class Meta:
        unique_together = ("user", "activity",
                           "start_datetime", "end_datetime")
        verbose_name_plural = "PlannedActivities"

    def __str__(self) -> str:
        """
        Returns a string representation of the planned activity object.
        """
        return f"{self.user.username} - {self.activity.name} - {self.start_datetime} - {self.end_datetime}"
